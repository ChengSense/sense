<!DOCTYPE html>
<html>

<head>
    <title>main.html</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="text/javascript">
        (function() {
            var express = /\{\s*\{([^\{\}]*)\}\s*\}/g;
            var variable = /\w+/g;
            var $each = /(@each)\s*\((.*)\s*,\s*\{/g;
            var $when = /(@when)\s*\((.*)\s*,\s*\{/g;
            var $else = /(@else)/g;
            var $chen = /(@each|@when)\s*\((.*)\s*,\s*\{/g;
            var $lang = /(@each|@when)\s*\((.*)\s*,\s*\{|\}\s*\)|(@else)/g;
            var $close = /\}\s*\)/g;
            var $break = /\}\s*\)|(@else)/g;

            function view(elem, scope) {
                init(elem = nodeList(query(elem)));
                compiler(elem, scope);
                return elem;
            }

            function code(_express, _scope) {
                with(_scope) {
                    try {
                        return eval("\"" + _express.replace(/\{\s*\{([^\{\}]*)\}\s*\}/g, "\"\+\($1)\+\"").replace(/[\f\n\r\v]/g, "") + "\"");
                    } catch (err) {
                        console.log(err)
                    }
                }
            }

            function codei(_express, _scope) {
                with(_scope) {
                    try {
                        return eval(_express);
                    } catch (err) {
                        console.log(err)
                    }
                }
            }

            function nodeList(nodes) {
                return each(nodes, [], function(node, i, list) {
                    list.push(this);
                });
            }

            function init(dom) {
                each(dom, function(node) {
                    if (node.childNodes[0] && node.nodeName != "SCRIPT")
                        init(nodeList(node.childNodes));
                    switch (node.nodeType) {
                        case 3:
                            node.nodeValue.replace(/((@each|@when)\s*\((.*)\s*,\s*\{|\{\s*\{\w*\}\s*\}|\s*\}\s*\)|@else)/g, function(tag) {
                                var nodes = node.nodeValue.split(tag);
                                node.parentNode.insertBefore(document.createTextNode(nodes[0]), node);
                                node.parentNode.insertBefore(document.createTextNode(tag), node);
                                node.nodeValue = node.nodeValue.replace(nodes[0], "").replace(tag, "");
                            });
                    }
                });
            }

            function removeClose(childNodes) {
                each(childNodes, function(child, index, childNodes) {
                    if ($chen.test(child.nodeValue))
                        removeClose(childNodes);
                    if ($close.test(child.nodeValue))
                        return true;
                    childNodes.shift();
                    child.$remove = true;
                });
            }

            function removeBreak(childNodes) {
                each(childNodes, function(child, index, childNodes) {
                    if ($chen.test(child.nodeValue))
                        removeClose(childNodes);
                    if ($break.test(child.nodeValue))
                        return true;
                    childNodes.shift();
                    child.$remove = true;
                });
            }

            function commom(node, scope) {
                each(node.attributes, function(child) {
                    child.name.replace(express, function(tag) {
                        var node = document.createAttribute(code(child.name, iscope));
                        child.ownerElement.setAttributeNode(node);
                        child.ownerElement.removeAttributeNode(child);
                    });
                    child.nodeValue.replace(express, function() {
                        child.nodeValue = code(child.nodeValue, scope);
                    });
                });

                if (node.nodeValue)
                    node.nodeValue.replace(express, function() {
                        var newNodes = query(code(node.nodeValue, scope));
                        each(newNodes, function(child) {
                            node.parentNode.insertBefore(child, node);
                        });
                        node.parentNode.removeChild(node);
                    });
            }

            function compiler(node, iscope, content) {
                each(node, function(node, index, childNodes) {
                    if (node.nodeValue && node.nodeValue.match($close))
                        return true;
                    switch (node.nodeType) {
                        case 1:
                            if (node.hasAttribute("each")) {
                                var expreses = node.getAttribute("each").split(":");
                                node.variable = expreses.shift().trim(), node.dataSource = expreses.pop().trim();
                                var scope = Object.create(iscope || {});
                                each(codei(node.dataSource, iscope), function(item, index) {
                                    scope[node.variable] = item;
                                    if(expreses[0])
                                      scope[expreses[0].trim()] = index;
                                    var newNode = node.cloneNode(true);
                                    newNode.removeAttribute("each");
                                    node.parentNode.insertBefore(newNode, node);
                                    compiler([newNode], scope);
                                });
                                node.parentNode.removeChild(node);
                                break;
                            }
                            compiler(nodeList(node.childNodes), iscope);
                            each(node.childNodes, function(child) {
                                if (child.nodeValue && child.nodeValue.match($lang) || child.$remove)
                                    child.parentNode.removeChild(child);
                            });
                        default:
                            if ($each.test(node.nodeValue)) {
                                var childNode = [];
                                childNodes.shift();
                                var expreses = node.nodeValue.replace($each, "$2").split(":");
                                node.variable = expreses.shift().trim(), node.dataSource = expreses.pop().trim();
                                var scope = Object.create(iscope || {});
                                var dataSource = codei(node.dataSource, iscope) || [];
                                each(dataSource, nodeList(childNodes), function(item, index, children) {
                                    scope[node.variable] = item;
                                    if(expreses[0])
                                      scope[expreses[0].trim()] = index;
                                    var childNodes = nodeList(children);
                                    each(childNodes, function(child, index, childNodes) {
                                        if (child.nodeValue && child.nodeValue.match($close))
                                            return true;
                                        var newNode = this.cloneNode(true);
                                        node.parentNode.insertBefore(newNode, node);
                                        child.$remove = true;
                                        switch (child.nodeType) {
                                            case 1:
                                                compiler([newNode], scope);
                                                childNodes.shift();
                                                break;
                                            default:
                                                newNode.nodeValue.replace($chen, function() {
                                                    childNodes.replace(child, newNode);
                                                    newNode.$child = true;
                                                    compiler(childNodes, scope);
                                                });
                                                commom(newNode, scope);
                                                childNodes.shift();
                                                childNode = childNodes;
                                        }
                                    });
                                });
                                childNodes.removes(childNode);
                                if (node.$child)
                                    return true;
                                removeClose(childNodes);
                            } else if ($when.test(node.nodeValue)) {
                                childNodes.shift();
                                var when = codei(node.nodeValue.replace($when, "$2"), iscope)
                                if (when) {
                                    each(childNodes, function(child, index, childNodes) {
                                        if (child.nodeValue && child.nodeValue.match($break))
                                            return true;
                                        var newNode = this.cloneNode(true);
                                        node.parentNode.insertBefore(newNode, node);
                                        child.$remove = true;
                                        switch (child.nodeType) {
                                            case 1:
                                                compiler([newNode], iscope);
                                                childNodes.shift();
                                                break;
                                            default:
                                                newNode.nodeValue.replace($chen, function() {
                                                    childNodes.replace(child, newNode);
                                                    newNode.$child = true;
                                                    compiler(childNodes, iscope);
                                                });
                                                commom(newNode, iscope);
                                                childNodes.shift();
                                        }
                                    });
                                    removeClose(childNodes);
                                } else {
                                    removeBreak(childNodes);
                                    each(childNodes, function(child, index, childNodes) {
                                        if (child.nodeValue && child.nodeValue.match($close))
                                            return true;
                                        var newNode = this.cloneNode(true);
                                        node.parentNode.insertBefore(newNode, node);
                                        child.$remove = true;
                                        switch (child.nodeType) {
                                            case 1:
                                                compiler([newNode], iscope);
                                                childNodes.shift();
                                                break;
                                            default:
                                                newNode.nodeValue.replace($chen, function() {
                                                    childNodes.replace(child, newNode);
                                                    newNode.$child = true;
                                                    compiler(childNodes, iscope);
                                                });
                                                commom(newNode, iscope);
                                                childNodes.shift();
                                        }
                                    });
                                }
                                if (node.$child)
                                    return true;
                            }
                            commom(node, iscope);
                            childNodes.shift();
                    }
                });
            }

            function each(obj, arg, fu) {
                if(obj == null)
                    return argu;
                var func = (arguments[2] || arguments[1]),
                    argu = (2 < arguments.length ? arg : obj);
                if (typeof obj != "object" || typeof func != "function") {
                    return;
                }
                if (obj.length) {
                    var length = obj.length;
                    for (var i = 0; i < length; i++) {
                        if (obj.length != length)
                            (i--, length = obj.length);
                        if (obj.hasOwnProperty(i))
                            if (func.call(obj[i], obj[i], i, argu))
                                break;
                    }
                } else {
                    for (var i in obj)
                        if (obj.hasOwnProperty(i))
                            if (func.call(obj[i], obj[i], i, argu))
                                break;
                }
                return argu;
            }
            Array.prototype.remove = function(n) {
                var index = this.indexOf(n);
                if (index > -1)
                    this.splice(index, 1);
            };
            Array.prototype.removes = function(n) {
                var length = this.length;
                for (var i = 0; i < length; i++) {
                    if (this.length != length)
                        (i--, length = this.length);
                    var index = n.indexOf(this[i]);
                    if (index < 0)
                        this.splice(i, 1);
                }
            };
            Array.prototype.replace = function(o, n) {
                var index = this.indexOf(o);
                if (index > -1)
                    this.splice(index, 1, n);
            };
            window.view = view;
        })(window);
        (function() {
            function query(express) {
                try {
                    var doc = document.querySelectorAll(express);
                    if(doc[0]) return doc;
                    newNode.innerHTML = express;
                    return newNode.childNodes;
                } catch (e) {
                    var newNode = document.createElement("div");
                    newNode.innerHTML = express;
                    return newNode.childNodes;
                }
            }
            window.query = query;
        })(window);
    </script>
</head>

<body>
    @each(item3:list3,{
       @when(false,{
         1111111111111
         <div>1111111111111</div>
         @else
         4444444444444
         <div>4444444444444</div>
       })
    })
    @each(item3:list3,{
      {{name}}
      <input value="{{name}}">
    })
    <div>{{age}}</div>
</body>

</html>
<script type="text/javascript">
    view("body", {
        id: "3516",
        name: "chengdong",
        age: 27,
        list1: [1, 2],
        list2: [4, 5],
        list3: [6, 7],
        list4: [8, 7],
    });
</script>
