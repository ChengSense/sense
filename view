<!DOCTYPE html>
<html>

<head>
    <title>main.html</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="text/javascript">
        (function() {
            var express = /\{\s*\{([^\{\}]*)\}\s*\}/g;
            var variable = /\w+/g;
            var $each = /(@each)\s*\((.*)\s*,\s*\{/g;
            var $when = /(@when)\s*\((.*)\s*,\s*\{/g;
            var $else = /(@else)/g;
            var $chen = /(@each|@when|@else)\s*\((.*)\s*,\s*\{/g;
            var $close = /\s*\}\s*\)/g;

            function view(elem, scope) {
                init(elem = nodeList(query(elem)));
                compiler(elem, scope);
                return elem;
            }

            function code(_express, _scope) {
                with(_scope) {
                    try {
                        return eval("\"" + _express.replace(/\{\s*\{([^\{\}]*)\}\s*\}/g, "\"\+\($1)\+\"").replace(/[\f\n\r\v]/g, "") + "\"");
                    } catch (err) {
                        console.log(err)
                    }
                }
            }

            function codei(_express, _scope) {
                with(_scope) {
                    try {
                        return eval(_express);
                    } catch (err) {
                        console.log(err)
                    }
                }
            }

            function nodeList(nodes) {
                return each(nodes, [], function(node, i, list) {
                    list.push(this);
                });
            }

            function init(dom) {
                each(dom, function(node) {
                    if (node.childNodes[0] && node.nodeName != "SCRIPT")
                        init(nodeList(node.childNodes));
                    switch (node.nodeType) {
                        case 3:
                            node.nodeValue.replace(/((@each|@when)\s*\((.*)\s*,\s*\{|\{\s*\{\w*\}\s*\}|\s*\}\s*\)|@else)/g, function(tag) {
                                var nodes = node.nodeValue.split(tag);
                                (node.parentNode).insertBefore(document.createTextNode(nodes[0]), node);
                                (node.parentNode).insertBefore(document.createTextNode(tag), node);
                                node.nodeValue = node.nodeValue.replace(nodes[0], "").replace(tag, "");
                            });
                    }
                });
            }

            function compiler(node, iscope, content) {
                each(node, function(node, index, childNodes) {
                    if ((!content && !node.parentNode) || $close.test(node.nodeValue)) {
                        if (node.parentNode)
                            node.parentNode.removeChild(node);
                        return true;
                    }
                    var insertion = (content || node);
                    switch (node.nodeType) {
                        case 1:
                            if (node.hasAttribute("each")) {
                                var expreses = node.getAttribute("each").split(":");
                                node.variable = expreses.shift().trim(), node.dataSource = expreses.pop().trim();
                                var scope = Object.create(iscope || {});
                                each(codei(node.dataSource, iscope), function(item, index) {
                                    scope[node.variable] = item, scope["index"] = index;
                                    var newNode = node.cloneNode(true);
                                    newNode.removeAttribute("each");
                                    insertion.parentNode.insertBefore(newNode, insertion);
                                    each(nodeList(newNode.attributes), function(node) {
                                        node.name.replace(express, function(tag) {
                                            var newNode = document.createAttribute(code(node.name, scope));
                                            node.ownerElement.setAttributeNode(newNode);
                                            node.ownerElement.removeAttributeNode(node);
                                        });
                                        node.nodeValue.replace(express, function() {
                                            node.nodeValue = code(node.nodeValue, scope);
                                        });
                                    });
                                    each(nodeList(newNode.childNodes), function(child, index, childNodes) {
                                        if ($close.test(child.nodeValue)) {
                                            if (child.parentNode)
                                                child.parentNode.removeChild(child);
                                            return true;
                                        }
                                        switch (child.nodeType) {
                                            case 1:
                                                compiler(childNodes, scope);
                                                break;
                                            default:
                                                child.nodeValue.replace($chen, function() {
                                                    compiler(childNodes, scope);
                                                });
                                                child.nodeValue.replace(express, function() {
                                                    child.nodeValue = code(child.nodeValue, scope);
                                                });
                                        }
                                        childNodes.shift();
                                    });
                                });
                                childNodes.shift();
                                if (node.parentNode)
                                    node.parentNode.removeChild(node);
                                return true;
                            }
                        default:
                            switch (typeof(node.nodeValue)) {
                                case "string":
                                    if (node.nodeValue.match($each)) {
                                        var childrenNode = childNodes,subNode = [];
                                        var expreses = node.nodeValue.replace($each, "$2").split(":");
                                        node.variable = expreses.shift().trim(), node.dataSource = expreses.pop().trim();
                                        var scope = Object.create(iscope || {});
                                        var dataSource = codei(node.dataSource, iscope);
                                        each(dataSource, nodeList(childNodes), function(item, index, children) {
                                            scope[node.variable] = item, scope["index"] = index;
                                            var childNodes = nodeList(children);
                                            childNodes.shift();
                                            each(childNodes, function(child, index, childNodes) {
                                                if ($close.test(child.nodeValue)) {
                                                    if (child.parentNode)
                                                        child.parentNode.removeChild(child);
                                                    return true;
                                                }
                                                var newNode = this.cloneNode(true);
                                                insertion.parentNode.insertBefore(newNode, insertion);
                                                switch (child.nodeType) {
                                                    case 1:
                                                        compiler([newNode], scope);
                                                        break;
                                                    default:
                                                        childNodes.replace(this, newNode);
                                                        newNode.nodeValue.replace($chen, function() {
                                                            compiler(childNodes, scope);
                                                        });
                                                        newNode.nodeValue.replace(express, function() {
                                                            newNode.nodeValue = code(newNode.nodeValue, scope);
                                                        });
                                                }
                                                childNodes.shift();
                                                if (child.parentNode)
                                                    child.parentNode.removeChild(child);
                                            });
                                            subNode = childNodes
                                        });
                                        if (dataSource.length == 0) {
                                            each(childNodes, function(child, index, childNodes) {
                                                if ($close.test(child.nodeValue)) {
                                                    if (child.parentNode)
                                                        child.parentNode.removeChild(child);
                                                    return true;
                                                }
                                                childNodes.shift();
                                                if (child.parentNode)
                                                    child.parentNode.removeChild(child);
                                            });
                                            return true;
                                        }
                                        childrenNode.removes(subNode);
                                        if (node.parentNode)
                                            node.parentNode.removeChild(node);
                                        return true;
                                    }
                                    if (node.nodeValue.match($when)) {
                                        childNodes.shift();
                                        var when = codei(node.nodeValue.replace($when, "$2"), iscope);
                                        if (when)
                                            each(childNodes, function(child, index, childNodes) {
                                                if ($else.test(child.nodeValue)) {
                                                    each(childNodes, function(child, index, childNodes) {
                                                        if ($close.test(child.nodeValue)) {
                                                            if (child.parentNode)
                                                                child.parentNode.removeChild(child);
                                                            return true;
                                                        }
                                                        childNodes.shift();
                                                        if (child.parentNode)
                                                            child.parentNode.removeChild(child);
                                                    });
                                                    childNodes.shift();
                                                    if (child.parentNode)
                                                        child.parentNode.removeChild(child);
                                                    return true;
                                                }
                                                if ($close.test(child.nodeValue)) {
                                                    if (child.parentNode)
                                                        child.parentNode.removeChild(child);
                                                    return true;
                                                }
                                                var newNode = this.cloneNode(true);
                                                insertion.parentNode.insertBefore(newNode, insertion);
                                                switch (child.nodeType) {
                                                    case 1:
                                                        compiler([newNode], iscope);
                                                        break;
                                                    default:
                                                        newNode.nodeValue.replace($chen, function() {
                                                            compiler(childNodes, iscope);
                                                        });
                                                        newNode.nodeValue.replace(express, function() {
                                                            newNode.nodeValue = code(newNode.nodeValue, iscope);
                                                        });
                                                }
                                                childNodes.shift();
                                                if (child.parentNode)
                                                    child.parentNode.removeChild(child);
                                            });
                                        else
                                            each(childNodes, function(child, index, childNodes) {
                                                if ($else.test(child.nodeValue)) {
                                                    childNodes.shift();
                                                    each(childNodes, function(child, index, childNodes) {
                                                        if ($close.test(child.nodeValue)) {
                                                            if (child.parentNode)
                                                                child.parentNode.removeChild(child);
                                                            return true;
                                                        }
                                                        var newNode = this.cloneNode(true);
                                                        insertion.parentNode.insertBefore(newNode, insertion);
                                                        switch (child.nodeType) {
                                                            case 1:
                                                                compiler([newNode], iscope);
                                                                break;
                                                            default:
                                                                newNode.nodeValue.replace($chen, function() {
                                                                    compiler(childNodes, iscope);
                                                                });
                                                                newNode.nodeValue.replace(express, function() {
                                                                    newNode.nodeValue = code(newNode.nodeValue, iscope);
                                                                });
                                                        }
                                                        childNodes.shift();
                                                        if (child.parentNode)
                                                            child.parentNode.removeChild(child);
                                                    });
                                                    if (child.parentNode)
                                                        child.parentNode.removeChild(child);
                                                    return true;
                                                }
                                                if ($close.test(child.nodeValue)) {
                                                    if (child.parentNode)
                                                        child.parentNode.removeChild(child);
                                                    return true;
                                                }
                                                childNodes.shift();
                                                if (child.parentNode)
                                                    child.parentNode.removeChild(child);
                                            });
                                        if (node.parentNode)
                                            node.parentNode.removeChild(node);
                                        return true;
                                    }
                                default:
                                    each(nodeList(node.attributes), function(node) {
                                        node.name.replace(express, function(tag) {
                                            var newNode = document.createAttribute(code(node.name, iscope));
                                            node.ownerElement.setAttributeNode(newNode);
                                            node.ownerElement.removeAttributeNode(node);
                                        });
                                        node.nodeValue.replace(express, function() {
                                            node.nodeValue = code(node.nodeValue, iscope);
                                        });
                                    });
                                    each(nodeList(node.childNodes), function(child, index, childNodes) {
                                        if ($close.test(child.nodeValue)) {
                                            if (child.parentNode)
                                                child.parentNode.removeChild(child);
                                            return true;
                                        }
                                        switch (child.nodeType) {
                                            case 1:
                                                compiler(childNodes, iscope);
                                                return;
                                            default:
                                                child.nodeValue.replace($chen, function() {
                                                    compiler(childNodes, iscope);
                                                });
                                                child.nodeValue.replace(express, function() {
                                                    child.nodeValue = code(child.nodeValue, iscope);
                                                });
                                        }
                                        childNodes.shift();
                                        if (child.nodeValue)
                                            child.nodeValue.replace(express, function() {
                                                child.nodeValue = code(child.nodeValue, iscope);
                                            });
                                    });
                                    childNodes.shift();
                                    if (node.nodeValue)
                                        node.nodeValue.replace(express, function() {
                                            node.nodeValue = code(node.nodeValue, iscope);
                                        });
                            }
                    }
                });
            }

            function each(obj, arg, fu) {
                var args = arguments,
                    func = (args[2] || args[1]),
                    argu = (2 < args.length ? arg : obj);
                if (1 > args.length || obj == null || typeof obj != "object" || typeof func != "function") {
                    return;
                }
                if (obj.length != undefined) {
                    var length = obj.length;
                    for (var i = 0; i < length; i++) {
                        if (obj.length != length)
                            (i--, length = obj.length);
                        if (obj.hasOwnProperty(i)) {
                            if (func.call(obj[i], obj[i], i, argu))
                                break;
                        }
                    }
                } else {
                    for (var i in obj) {
                        if (obj.hasOwnProperty(i)) {
                            if (func.call(obj[i], obj[i], i, argu))
                                break;
                        }
                    }
                }
                return argu;
            }
            Array.prototype.remove = function(n) {
                var index = this.indexOf(n);
                if (index > -1)
                    this.splice(index, 1);
            };
            Array.prototype.removes = function(n) {
                var length = this.length;
                for (var i = 0; i < length; i++) {
                    if (this.length != length)
                        (i--, length = this.length);
                    var index = n.indexOf(this[i]);
                    if (index < 0)
                        this.splice(i, 1);
                }
            };
            Array.prototype.replace = function(o, n) {
                var index = this.indexOf(o);
                if (index > -1)
                    this.splice(index, 1, n);
            };
            window.view = view;
        })(window);
        (function() {
            function query(express) {
                try {
                    var doc = document.querySelectorAll(express);
                    switch (typeof doc[0]) {
                        case undefined:
                            var newNode = document.createElement("div");
                            newNode.innerHTML = express;
                            return newNode.childNodes;
                        default:
                            return doc;
                    }
                } catch (e) {
                    var newNode = document.createElement("div");
                    newNode.innerHTML = express;
                    return newNode.childNodes;
                }
            }
            window.query = query;
        })(window);
    </script>
</head>

<body>
    @each(item1:list1,{
    <div id="{{id}}" each="item1:list1">
        @each(item2:list2,{
          {{item2}}. {{name}} : {{age}}
          @each(item3:list3,{
            @when(false,{
              {{item2}}
              @else
              11111111111 
            })
            <div id="{{index}}">
                @each(item4:list4,{
                  {{item4}}. {{name}} : {{age}}
                })
            </div>
            <input value="{{name}}">
            <input value="{{age}}"> {{age}}
         })
      })
    </div>
    })
</body>

</html>
<script type="text/javascript">
    view("body", {
        id: "3516",
        name: "chengdong",
        age: 27,
        list1: [1, 2],
        list2: [4, 5],
        list3: [6, 7],
        list4: [8, 9]
    });
</script>
